# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

### This allows you to place orders on the book

macro ORDERS: self.controller.lookup('Orders')
macro MUTEX: self.controller.lookup('Mutex')

inset('../macros/externs.sem')
inset('../macros/assertNoValue.sem')
inset('../macros/assertPrivateCall.sem')
inset('../macros/require.sem')
inset('../macros/safeMath.sem')
inset('../macros/unitConversions.sem')

data controller

# Order types
macro BID: 1
macro ASK: 2

macro MIN_ORDER_VALUE: 10**14

# Bid / Ask actions: puts orders on the book
# price is always in 10**18 fxp, so a price of 1 is 1 WEI.
# amount is the number of attoshares the order is for (either to buy or to sell). For a currency with 18 decimals [like ether] if you buy 10**18 at a price of 10**18 then that's going to buy you ONE share [10**18 units] at a cost of ONE ETH [10**18 wei]. For a currency with say 9 decimals, if you buy 10**9 at a price of 10**18 that'll also buy you ONE full unit of that currency worth of shares. If you buy 10**9 at a price of 10**17 that'll buy you POINT_ONE full units of that currency worth of shares [so it'll cost you 10**8]. If you buy 10**8 amount at a price of 10**18 you're also effectively paying POINT_ONE units of currency, this time it's just to get you 10x less shares [in other words you're paying 10x more per share].
# price is the exact price you want to buy/sell at [which may not be the cost, for example to short a binary market it'll cost 1-price, to go long it'll cost price]
# smallest order value is 10**14 WEI

def any():
    assertNoValue()

def init():
    self.controller = msg.sender

# @public
def publicMakeOrder(type: uint8, attoshares: uint256, displayPrice: int256, market: address, outcome: uint8, betterOrderID: bytes32, worseOrderID: bytes32, tradeGroupID: uint256):
    assertNoValue()
    MUTEX.acquire()
    self.controller.stopInEmergency()
    orderID = self.makeOrder(msg.sender, type, attoshares, displayPrice, market, outcome, betterOrderID, worseOrderID, tradeGroupID)
    MUTEX.release()
    return(orderID : bytes32)

# @internal
def makeOrder(sender: address, type: uint8, attoshares: uint256, displayPrice: int256, market: address, outcome: uint8, betterOrderID: bytes32, worseOrderID: bytes32, tradeGroupID: uint256):
    assertNoValue()
    self.controller.assertIsWhitelisted(msg.sender)
    require(sender)
    require(type == BID or type == ASK)
    require(0 < attoshares)
    require(market)
    require(outcome < market.getNumberOfOutcomes())
    require(market.getMinDisplayPrice() < displayPrice and displayPrice < market.getMaxDisplayPrice())

    attotokensPerShare = displayPrice - market.getMinDisplayPrice()
    if(type == ASK):
        escrow = self.placeAsk(sender, attoshares, attotokensPerShare, market, outcome, outitems=2)
    elif(type == BID):
        escrow = self.placeBid(sender, attoshares, attotokensPerShare, market, outcome, outitems=2)
    else:
        ~invalid()

    fxpMoneyEscrowed = escrow[0]
    fxpSharesEscrowed = escrow[1]

    orderID = ORDERS.getOrderId(type, market, attoshares, displayPrice, sender, block.number, outcome, fxpMoneyEscrowed, fxpSharesEscrowed)
    require(ORDERS.getAmount(orderID, type, market, outcome) == 0)
    orderID = ORDERS.saveOrder(type, market, attoshares, displayPrice, sender, outcome, fxpMoneyEscrowed, fxpSharesEscrowed, betterOrderID, worseOrderID, tradeGroupID)

    return(orderID : bytes32)

# @private
def placeBid(sender: address, attoshares: uint256, attotokensPerShare: int256, market: address, outcome: uint8):
    assertNoValue()
    assertPrivateCall()
    orderValueInAttotokens = safeFxpMul(attoshares, safeSub(market.getCompleteSetCostInAttotokens(), attotokensPerShare))
    require(orderValueInAttotokens >= MIN_ORDER_VALUE)

    attotokensEscrowed = 0
    attosharesEscrowed = 0
    shareToken = market.getShareToken(outcome)
    attosharesToCover = attoshares
    numberOfOutcomes = market.getNumberOfOutcomes()

    # figure out how many almost-complete-sets (just missing `outcome` share) the maker has
    attosharesHeld = 2**254
    i = 0
    while i < numberOfOutcomes:
        if i != outcome:
            attosharesHeld = min(market.getShareToken(i).balanceOf(sender), attosharesHeld)
        i += 1

    # take shares into escrow if they have any alomst-complete-sets
    if attosharesHeld:
        attosharesEscrowed = min(attosharesHeld, attosharesToCover)
        attosharesToCover -= attosharesEscrowed
        i = 0
        while i < numberOfOutcomes:
            if (i != outcome):
                market.getShareToken(i).transferFrom(sender, market, attosharesEscrowed)
            i += 1

    # if not able to cover entire order with shares alone, then cover remaining with tokens
    if attosharesToCover:
        attotokensRequiredToLongOneShare = attotokensPerShare
        attotokensEscrowed = safeFxpMul(attosharesToCover, attotokensRequiredToLongOneShare)
        require(market.getDenominationToken().transferFrom(sender, market, attotokensEscrowed))

    return([attotokensEscrowed, attosharesEscrowed]: arr)

# @private
def placeAsk(sender: address, attoshares: uint256, attotokensPerShare: int256, market: address, outcome: uint8):
    assertNoValue()
    assertPrivateCall()
    orderValueInAttotokens = safeFxpMul(attoshares, attotokensPerShare)
    require(orderValueInAttotokens >= MIN_ORDER_VALUE)

    attotokensEscrowed = 0
    attosharesEscrowed = 0
    shareToken = market.getShareToken(outcome)
    attosharesToCover = attoshares

    # figure out how many shares of the outcome the maker has
    attosharesHeld = shareToken.balanceOf(sender)

    # take shares in escrow if user has shares
    if attosharesHeld:
        attosharesEscrowed = min(attosharesHeld, attosharesToCover)
        attosharesToCover -= attosharesEscrowed
        shareToken.transferFrom(sender, market, attosharesEscrowed)

    # if not able to cover entire order with shares alone, then cover remaining with tokens
    if attosharesToCover:
        attotokensRequiredToShortOneShare = safeSub(market.getCompleteSetCostInAttotokens(), attotokensPerShare)
        attotokensEscrowed = safeFxpMul(attosharesToCover, attotokensRequiredToShortOneShare)
        require(market.getDenominationToken().transferFrom(sender, market, attotokensEscrowed))

    return([attotokensEscrowed, attosharesEscrowed]: arr)

# @controller
def setController(newController: address):
    require(msg.sender == self.controller)
    self.controller = newController
    return(1)

# @controller
def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)
